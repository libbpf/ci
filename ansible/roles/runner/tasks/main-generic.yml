---

# Used by ansible modules later
- name: Install docker pip
  become: yes
  ansible.builtin.pip:
    name:
      - docker
    extra_args: --user
    executable: pip3

- name: Script to generate APP_TOKEN
  become: yes
  ansible.builtin.copy:
    src: app_token.sh
    dest: "{{ runner_base_dir }}/app_token.sh"
    mode: 0755
    owner: root
    group: root

- name: Write App private key
  no_log: true
  become: yes
  ansible.builtin.copy:
    content: "{{ item.secret }}"
    dest: "{{ runner_base_dir }}/{{ item.name }}_{{ item.id }}_priv.pem"
    mode: 0700
    owner: root
    group: root
  with_items: "{{ runner_gh_apps |default([]) }}"

- name: Set runner env
  become: yes
  ansible.builtin.copy:
    dest: "{{ runner_base_dir }}/runner_unit.env"
    content: |
      DOCKER_TAG={{ runner_docker_tag }}
    mode: 0700
    owner: root
    group: root

- name: Generate runners facts
  set_fact:
    runners: "{{ runners|default([]) + [ {'normalized': item.name | replace('/','-'), 'workers': range(item.instances) | list }  | combine(item) ] }}"
  with_items: "{{ runner_repo_list }}"

- name: Generate runner environment file
  block:
    - name: Load ec2 metadata facts
      amazon.aws.ec2_metadata_facts:

    - name: Set runner name prefix
      set_fact:
        runner_prefix: "{{ ansible_ec2_instance_id }}"

  rescue:
    - name: Set runner name prefix
      set_fact:
        runner_prefix: "{{ ansible_hostname }}"

- name: Generate runner env outside AWS
  become: yes
  ansible.builtin.copy:
    dest: "{{ runner_base_dir }}/actions-runner-{{ item.0.normalized }}-{{ 'worker-%02d.env' | format(item.1) }}"
    content: |
      ACCESS_TOKEN={{ runner_gh_token_default }}
      RUNNER_WORKDIR=/tmp/work
      LABELS=ubuntu-latest,{{ ansible_architecture }},docker-{{ runner_docker_tag }}
      EPHEMERAL=true
      REPO_URL=https://github.com/{{ item.0.name }}
      RUNNER_NAME={{ runner_prefix }}-{{ 'worker-%02d' | format(item.1) }}
  loop: "{{ runners | subelements('workers') }}"

- name: Docker GHCR login
  become: yes
  docker_login:
    registry: ghcr.io
    username: "{{ runner_gh_user_default }}"
    password: "{{ runner_gh_token_default }}"

- name: Check /dev/kvm exists
  ansible.builtin.stat:
    path: /dev/kvm
  register: has_kvm

- name: Set runner.service
  become: yes
  ansible.builtin.copy:
    dest: "/etc/systemd/system/actions-runner-{{ item.normalized }}@.service"
    content: |
      [Unit]
      Description=Ephemeral GitHub Actions Runner Container for {{ item.name }} - %i
      After=docker.service
      Requires=docker.service

      [Service]
      TimeoutStartSec=0
      Restart=always
      EnvironmentFile={{ runner_base_dir }}/runner_unit.env
      ExecStartPre=-/usr/bin/docker stop %p-%i
      ExecStartPre=-/usr/bin/docker rm %p-%i
      ExecStartPre=-/usr/bin/docker pull ghcr.io/kernel-patches/runner:${DOCKER_TAG}
      ExecStart=/usr/bin/docker run {{ '--device=/dev/kvm' if has_kvm.stat.exists }} \
                  --rm \
                  --env-file "{{ runner_base_dir }}/actions-runner-{{ item.normalized }}-worker-%i.env" \
                  --name %p-%i \
                  ghcr.io/kernel-patches/runner:${DOCKER_TAG}
    mode: 0700
    owner: root
    group: root
  loop: "{{ runners }}"
  notify:
    - reload systemd daemon

- name: Start and enable runner services
  become: yes
  ansible.builtin.service:
    name: "{{ 'actions-runner-%s@%02d' | format(item.0.normalized, item.1) }}"
    state: started
    enabled: yes
  loop: "{{ runners | subelements('workers') }}"
