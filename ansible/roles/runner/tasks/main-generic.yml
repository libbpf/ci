---

- name: Generate runner env outside AWS
  become: yes
  ansible.builtin.copy:
    dest: "{{ runner_base_dir }}/actions-runner-{{ item.0.normalized }}-{{ 'worker-%02d.env' | format(item.1) }}"
    content: |
      ACCESS_TOKEN={{ runner_gh_token_default }}
      RUNNER_WORKDIR={{ runner_workdir }}
      LABELS={{ ansible_architecture }},docker-{{ runner_docker_tag }}
      EPHEMERAL=true
      {% if '/' in item.0.name %}
      {# The presence of a / in the name signifies that we have a repo name, otherwise we assume an organization name. #}
      REPO_URL=https://github.com/{{ item.0.name }}
      {% else %}
      RUNNER_SCOPE=org
      ORG_NAME={{ item.0.name }}
      {% endif %}
      RUNNER_NAME={{ runner_name_prefix }}-{{ 'worker-%02d' | format(item.1) }}
  loop: "{{ runners | subelements('workers') }}"

- name: Docker GHCR login
  become: yes
  docker_login:
    registry: ghcr.io
    username: "{{ runner_gh_user_default }}"
    password: "{{ runner_gh_token_default }}"

- name: Check /dev/kvm exists
  ansible.builtin.stat:
    path: /dev/kvm
  register: has_kvm

- name: Set runner.service
  become: yes
  ansible.builtin.copy:
    dest: "/etc/systemd/system/actions-runner-{{ item.normalized }}@.service"
    # The use of `namespace` is needed. See Jinja scoping: https://jinja.palletsprojects.com/en/3.1.x/templates/#assignments
    content: |
      {% set ns = namespace(ghapp=undefined) %}
      {% for runner_gh_app in runner_gh_apps if runner_gh_app.id == item.gh_app_id %}
        {%- set ns.ghapp = runner_gh_app %}
      {%- endfor %}
      [Unit]
      Description=Ephemeral GitHub Actions Runner Container for {{ item.name }} - %i
      After=docker.service
      Requires=docker.service

      [Service]
      TimeoutStartSec=0
      Restart=always
      EnvironmentFile={{ runner_base_dir }}/runner_unit.env
      ExecStartPre=-/usr/bin/docker stop %p-%i
      ExecStartPre=-/usr/bin/docker rm %p-%i
      ExecStartPre=-/usr/bin/docker pull ghcr.io/kernel-patches/runner:${DOCKER_TAG}
      {% if ns.ghapp is defined %}
      ExecStartPre=-{{ runner_base_dir }}/gh_token_generator.sh {{ ns.ghapp.id }} "{{ runner_base_dir }}/{{ ns.ghapp.name }}_{{ ns.ghapp.id }}_priv.pem" "{{ runner_base_dir }}/actions-runner-{{ item.normalized }}-worker-%i-ghtoken.env"
      {% endif %}
      ExecStart=/usr/bin/docker run {{ '--device=/dev/kvm --tmpfs %s:exec' | format(runner_workdir) if has_kvm.stat.exists }} \
                  --rm \
                  --env-file "{{ runner_base_dir }}/actions-runner-{{ item.normalized }}-worker-%i.env" \
      {% if ns.ghapp is defined %}
                  --env-file "{{ runner_base_dir }}/actions-runner-{{ item.normalized }}-worker-%i-ghtoken.env" \
      {% endif %}
                  --name %p-%i \
                  ghcr.io/kernel-patches/runner:${DOCKER_TAG}

      [Install]
      WantedBy=multi-user.target
    mode: 0700
    owner: root
    group: root
  loop: "{{ runners }}"
  notify:
    - reload systemd daemon

- name: Start and enable runner services
  become: yes
  ansible.builtin.service:
    name: "{{ 'actions-runner-%s@%02d' | format(item.0.normalized, item.1) }}"
    state: started
    enabled: yes
  loop: "{{ runners | subelements('workers') }}"
