---

# Used by ansible modules later
- name: Install docker/boto3 pip
  become: yes
  ansible.builtin.pip:
    name:
      - docker
      - boto3
    extra_args: --user

- name: Set runner env
  become: yes
  ansible.builtin.copy:
    dest: "{{ runner_base_dir }}/runner_unit.env"
    content: |
      DOCKER_TAG={{ runner_docker_tag }}
    mode: 0700
    owner: root
    group: root

- name: Generate runner environment file
  block:
    - name: Load ec2 metadata facts
      amazon.aws.ec2_metadata_facts:

    - name: Retrieve all tags on an instance
      become: yes
      amazon.aws.ec2_tag_info:
        region: "{{ ansible_ec2_placement_region }}"
        resource: "{{ ansible_ec2_instance_id }}"
      register: instance_tags

    - name: Generate runner env file within AWS
      become: yes
      ansible.builtin.copy:
        dest: "{{ runner_base_dir }}/runner.env"
        content: |
          ACCESS_TOKEN={{ runner_gh_token_default }}
          RUNNER_WORKDIR=/tmp/work
          LABELS=ubuntu-latest,docker-{{ runner_docker_tag }}
          EPHEMERAL=true
          REPO_URL={{ instance_tags.tags['Repo'] }}
          RUNNER_NAME={{ ansible_ec2_instance_id }}
  rescue:
    - name: Generate runner env outside AWS
      become: yes
      ansible.builtin.copy:
        dest: "{{ runner_base_dir }}/runner.env"
        content: |
          ACCESS_TOKEN={{ runner_gh_token_default }}
          RUNNER_WORKDIR=/tmp/work
          LABELS=ubuntu-latest,docker-{{ runner_docker_tag }}
          EPHEMERAL=true
          REPO_URL=https://github.com/{{ runner_repo_list[0].name }}
          RUNNER_NAME={{ inventory_hostname }}

- name: Docker GHCR login
  become: yes
  docker_login:
    registry: ghcr.io
    username: "{{ runner_gh_user_default }}"
    password: "{{ runner_gh_token_default }}"

- name: Set runner.service
  become: yes
  ansible.builtin.copy:
    dest: "{{ runner_base_dir }}/runner.service"
    content: |
      [Unit]
      Description=Ephemeral GitHub Actions Runner Container
      After=docker.service
      Requires=docker.service

      [Service]
      TimeoutStartSec=0
      Restart=always
      EnvironmentFile={{ runner_base_dir }}/runner_unit.env
      ExecStartPre=-/usr/bin/docker stop %n
      ExecStartPre=-/usr/bin/docker rm %n
      ExecStartPre=-/usr/bin/docker pull ghcr.io/kernel-patches/runner:${DOCKER_TAG}
      ExecStartPre=-/usr/bin/docker system prune -f
      ExecStart=/usr/bin/docker run --rm --env-file "{{ runner_base_dir }}/runner.env" --name %n ghcr.io/kernel-patches/runner:${DOCKER_TAG}
    mode: 0700
    owner: root
    group: root
  notify:
    - reload systemd daemon
    - restart runner