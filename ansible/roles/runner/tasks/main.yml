---

# Used by ansible modules later
- name: Install docker pip
  become: yes
  ansible.builtin.pip:
    name:
      - docker
    extra_args: --user
    executable: pip3

- name: Create runner directory
  become: yes
  ansible.builtin.file:
    path: "{{ runner_base_dir }}"
    state: directory
    mode: 0755

- name: Copy GH application token scripts
  become: yes
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ runner_base_dir }}/{{ item }}"
    mode: 0755
    owner: root
    group: root
  with_items:
    - app_token.sh
    - gh_token_generator.sh

- name: Write App private key
  no_log: true
  become: yes
  ansible.builtin.copy:
    content: "{{ item.secret }}"
    dest: "{{ runner_base_dir }}/{{ item.name }}_{{ item.id }}_priv.pem"
    mode: 0700
    owner: root
    group: root
  with_items: "{{ runner_gh_apps |default([]) }}"

- name: Set runner env
  become: yes
  ansible.builtin.copy:
    dest: "{{ runner_base_dir }}/runner_unit.env"
    content: |
      DOCKER_TAG={{ runner_docker_tag }}
    mode: 0700
    owner: root
    group: root

- name: Generate runners facts
  set_fact:
    runners: "{{ runners|default([]) + [ {'normalized': item.name | replace('/','-'), 'workers': range(item.instances) | list }  | combine(item) ] }}"
  with_items: "{{ runner_repo_list }}"

- name: Generate runner environment file
  block:
    - name: Load ec2 metadata facts
      amazon.aws.ec2_metadata_facts:

    - name: Set runner name prefix
      set_fact:
        runner_name_prefix: "{{ '%s-' | format(runner_prefix) if runner_prefix }}{{ ansible_ec2_instance_id }}"

  rescue:
    - name: Set runner name prefix
      set_fact:
        runner_name_prefix: "{{ '%s-' | format(runner_prefix) if runner_prefix }}{{ ansible_hostname }}"

# Build docker images
- include_tasks: main-s390x.yml
  when: ansible_architecture == 's390x'

- name: Generate runner env outside AWS
  become: yes
  ansible.builtin.copy:
    dest: "{{ runner_base_dir }}/actions-runner-{{ item.0.normalized }}-{{ 'worker-%02d.env' | format(item.1) }}"
    content: |
      ACCESS_TOKEN={{ runner_gh_token_default }}
      RUNNER_WORKDIR={{ runner_workdir }}
      LABELS={{ ansible_architecture }},docker-{{ runner_docker_tag }}
      EPHEMERAL=true
      {% if '/' in item.0.name %}
      {# The presence of a / in the name signifies that we have a repo name, otherwise we assume an organization name. #}
      REPO_URL=https://github.com/{{ item.0.name }}
      {% else %}
      RUNNER_SCOPE=org
      ORG_NAME={{ item.0.name }}
      {% endif %}
      RUNNER_NAME={{ runner_name_prefix }}-{{ 'worker-%02d' | format(item.1) }}
  loop: "{{ runners | subelements('workers') }}"

- name: Docker GHCR login
  become: yes
  docker_login:
    registry: ghcr.io
    username: "{{ runner_gh_user_default }}"
    password: "{{ runner_gh_token_default }}"

- name: Check /dev/kvm exists
  ansible.builtin.stat:
    path: /dev/kvm
  register: has_kvm

- name: Set runner.service
  become: yes
  ansible.builtin.copy:
    dest: "/etc/systemd/system/actions-runner-{{ item.normalized }}@.service"
    # The use of `namespace` is needed. See Jinja scoping: https://jinja.palletsprojects.com/en/3.1.x/templates/#assignments
    content: |
      {% set ns = namespace(ghapp=undefined) %}
      {% for runner_gh_app in runner_gh_apps if runner_gh_app.id == item.gh_app_id %}
        {%- set ns.ghapp = runner_gh_app %}
      {%- endfor %}
      [Unit]
      Description=Ephemeral GitHub Actions Runner Container for {{ item.name }} - %i
      After=docker.service
      Requires=docker.service

      [Service]
      TimeoutStartSec=0
      Restart=always
      EnvironmentFile={{ runner_base_dir }}/runner_unit.env
      ExecStartPre=-/usr/bin/docker stop %p-%i
      ExecStartPre=-/usr/bin/docker rm %p-%i
      ExecStartPre=-/usr/bin/docker pull {{ runner_docker_image_url }}:${DOCKER_TAG}
      {% if ns.ghapp is defined %}
      ExecStartPre=-{{ runner_base_dir }}/gh_token_generator.sh {{ ns.ghapp.id }} "{{ runner_base_dir }}/{{ ns.ghapp.name }}_{{ ns.ghapp.id }}_priv.pem" "{{ runner_base_dir }}/actions-runner-{{ item.normalized }}-worker-%i-ghtoken.env"
      {% endif %}
      ExecStart=/usr/bin/docker run {{ '--device=/dev/kvm --tmpfs %s:exec' | format(runner_workdir) if has_kvm.stat.exists }} \
      {% if runner_docker_healthcheck %}
                  {{ runner_docker_healthcheck }} \
      {% endif %}
                  --rm \
                  --env-file "{{ runner_base_dir }}/actions-runner-{{ item.normalized }}-worker-%i.env" \
      {% if ns.ghapp is defined %}
                  --env-file "{{ runner_base_dir }}/actions-runner-{{ item.normalized }}-worker-%i-ghtoken.env" \
      {% endif %}
                  --name %p-%i \
                  {{ runner_docker_image_url }}:${DOCKER_TAG}

      [Install]
      WantedBy=multi-user.target
    mode: 0700
    owner: root
    group: root
  loop: "{{ runners }}"
  notify:
    - reload systemd daemon

- name: Start and enable runner services
  become: yes
  ansible.builtin.service:
    name: "{{ 'actions-runner-%s@%02d' | format(item.0.normalized, item.1) }}"
    state: started
    enabled: yes
  loop: "{{ runners | subelements('workers') }}"

# Docker pruning
- name: Set docker pruning service
  become: yes
  ansible.builtin.copy:
    dest: /etc/systemd/system/docker_pruning.service
    content: |
      [Unit]
      Description=Prune unused docker resources
      Wants=docker_pruning.timer

      [Service]
      Type=oneshot
      ExecStart=/usr/bin/docker system prune --volumes -f
    mode: 0644
    owner: root
    group: root
  notify:
    - reload systemd daemon
    - restart docker_pruning timer


- name: Set docker pruning timer
  become: yes
  ansible.builtin.copy:
    dest: /etc/systemd/system/docker_pruning.timer
    content: |
      [Unit]
      Description=Run docker_pruning service daily

      [Timer]
      # Run at 8:00 UTC daily
      OnCalendar=*-*-* 08:00:00
      [Install]
      WantedBy=timers.target
    mode: 0644
    owner: root
    group: root
  notify:
    - reload systemd daemon
    - restart docker_pruning timer

- name: Enable docker pruning timer
  become: yes
  ansible.builtin.service:
    name: docker_pruning.timer
    enabled: yes
    state: started

# Watchdog
- name: Actions runner watchdog script
  become: yes
  ansible.builtin.copy:
    src: actions-runner-watchdog.sh
    dest: /usr/local/sbin/actions-runner-watchdog.sh
    mode: 0700
    owner: root
    group: root

- name: Set actions runner watchdog service
  become: yes
  ansible.builtin.copy:
    dest: /etc/systemd/system/actions-runner-watchdog.service
    content: |
      [Unit]
      Description=Kill unhealty actions runner containers
      Wants=actions-runner-watchdog.timer

      [Service]
      Type=oneshot
      ExecStart=/usr/local/sbin/actions-runner-watchdog.sh
    mode: 0644
    owner: root
    group: root
  notify:
    - reload systemd daemon
    - restart actions-runner-watchdog timer

- name: Set actions runner watchdog timer
  become: yes
  ansible.builtin.copy:
    dest: /etc/systemd/system/actions-runner-watchdog.timer
    content: |
      [Unit]
      Description=Run actions-runner-watchdog service regularly

      [Timer]
      # Run two minutes after previous run done
      OnBootSec=1m
      OnUnitInactiveSec=2m
      [Install]
      WantedBy=timers.target
    mode: 0644
    owner: root
    group: root
  notify:
    - reload systemd daemon
    - restart actions-runner-watchdog timer

- name: Enable actions runner watchdog timer
  become: yes
  ansible.builtin.service:
    name: actions-runner-watchdog.timer
    enabled: yes
    state: started
