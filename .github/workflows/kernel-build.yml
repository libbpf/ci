
name: Reusable build workflow

on:
  workflow_call:
    inputs:
      arch:
        required: true
        type: string
        description: The architecture to build against, e.g x86_64, aarch64, s390x...
      toolchain_full:
        required: true
        type: string
        description: The toolchain and for llvm, its version, e.g gcc, llvm-15
      toolchain:
        required: true
        type: string
        description: The toolchain, e.g gcc, llvm
      runs_on:
        required: true
        type: string
        description: The runners to run the test on. This is a json string representing an array of labels.
      llvm-version:
        required: true
        type: string
        description: The version of LLVM used to build selftest.... for llvm toolchain, this should match the one from toolchain_full, for gcc it is an arbritrary version we decide to build selftests against.
      kernel:
        required: true
        type: string
        description: The kernel to run the test against. For KPD this is always LATEST, which runs against a newly built kernel.
      download_sources:
        required: true
        type: boolean
        description: Whether to download the linux sources into the working directory.
        default: false
      release:
        required: false
        type: boolean
        description: Build selftest with -O2 optimization
        default: false

jobs:
  build:
    name: build for ${{ inputs.arch }} with ${{ inputs.toolchain_full }}${{ inputs.release && '-O2' || '' }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: 100
    env:
        ARTIFACTS_ARCHIVE: "vmlinux-${{ inputs.arch }}-${{ inputs.toolchain_full }}.tar.zst"
        BUILD_SCHED_EXT_SELFTESTS: ${{ inputs.arch == 'x86_64' || inputs.arch == 'aarch64' && 'true' || '' }}
        CACHED_KERNEL_BUILD: ${{ github.event_name == 'push' || github.repository == 'libbpf/ci'  && 'true' || '' }}
        KBUILD_OUTPUT: ${{ github.workspace }}/kbuild-output
        KERNEL: ${{ inputs.kernel }}
        REPO_PATH: ""
        REPO_ROOT: ${{ github.workspace }}
        KERNEL_ROOT: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
        # We fetch an actual bit of history here to facilitate incremental
        # builds (which may check out some earlier upstream change).
        with:
          fetch-depth: 50
      - if: ${{ inputs.download_sources }}
        name: Download bpf-next tree
        env:
          FETCH_DEPTH: ${{ env.CACHED_KERNEL_BUILD && 16 || 0 }}
        uses: ./get-linux-source
        with:
          dest: '.kernel'
      - if: ${{ env.CACHED_KERNEL_BUILD }}
        uses: ./prepare-incremental-build
        with:
          repo-root: ${{ inputs.download_sources && '.kernel' || env.REPO_ROOT }}
          base-branch: >-
            ${{    github.repository == 'kernel-patches/bpf' && github.event_name == 'push' && github.ref_name
                || github.repository == 'kernel-patches/bpf' && github.event_name != 'push' && github.base_ref
                || 'master'
             }}
          arch: ${{ inputs.arch }}
          toolchain_full: ${{ inputs.toolchain_full }}
          kbuild-output: ${{ env.KBUILD_OUTPUT }}
      - if: ${{ inputs.download_sources }}
        name: Move linux source in place
        shell: bash
        run: |
          cd .kernel
          rm -rf .git
          mv -t .. $(ls -A)
          cd ..
          rmdir .kernel
      - uses:  ./patch-kernel
        with:
          patches-root: '${{ github.workspace }}/ci/diffs'
          repo-root: ${{ env.REPO_ROOT }}
      - name: Setup build environment
        uses: ./setup-build-env
        with:
          arch: ${{ inputs.arch }}
          llvm-version: ${{ inputs.llvm-version }}
          pahole: c2f89dab3f2b0ebb53bab3ed8be32f41cb743c37
      - name: Print toolchain version used
        shell: bash
        run: |
          TOOLCHAIN=${{ inputs.toolchain }}
          if [ $TOOLCHAIN = "llvm" ]; then
            TOOLCHAIN="clang-${{ inputs.llvm-version }}"
          fi
          ${TOOLCHAIN} --version
      - name: Build kernel image
        uses: ./build-linux
        with:
          arch: ${{ inputs.arch }}
          toolchain: ${{ inputs.toolchain }}
          kbuild-output: ${{ env.KBUILD_OUTPUT }}
          max-make-jobs: 32
          llvm-version: ${{ inputs.llvm-version }}
      - name: Build selftests/bpf
        uses: ./build-selftests
        env:
          MAX_MAKE_JOBS: 32
          RELEASE: ${{ inputs.release && '1' || '' }}
        with:
          arch: ${{ inputs.arch }}
          kernel-root: ${{ env.KERNEL_ROOT }}
          llvm-version: ${{ inputs.llvm-version }}
          toolchain: ${{ inputs.toolchain }}

      - if: ${{ env.BUILD_SCHED_EXT_SELFTESTS }}
        name: Build selftests/sched_ext
        uses: ./build-scx-selftests
        with:
          kbuild-output: ${{ env.KBUILD_OUTPUT }}
          repo-root: ${{ env.REPO_ROOT }}
          arch: ${{ inputs.arch }}
          toolchain: ${{ inputs.toolchain }}
          llvm-version: ${{ inputs.llvm-version }}
          max-make-jobs: 32
      - if: ${{ github.event_name != 'push' }}
        name: Build samples
        uses: ./build-samples
        with:
          arch: ${{ inputs.arch }}
          toolchain: ${{ inputs.toolchain }}
          kbuild-output: ${{ env.KBUILD_OUTPUT }}
          max-make-jobs: 32
          llvm-version: ${{ inputs.llvm-version }}
      - name: Tar artifacts
        id: tar-artifacts
        uses: ./tar-artifacts
        env:
          ARCHIVE_BPF_SELFTESTS: 'true'
          ARCHIVE_MAKE_HELPERS: ${{ github.repository != 'kernel-patches/bpf' && 'true' || '' }}
          ARCHIVE_SCHED_EXT_SELFTESTS: ${{ env.BUILD_SCHED_EXT_SELFTESTS }}
        with:
          arch: ${{ inputs.arch }}
          archive: ${{ env.ARTIFACTS_ARCHIVE }}
          kbuild-output: ${{ env.KBUILD_OUTPUT }}
          repo-root: ${{ env.REPO_ROOT }}
      - if: ${{ ! env.CACHED_KERNEL_BUILD }}
        name: Remove KBUILD_OUTPUT content
        shell: bash
        run: |
          # Remove $KBUILD_OUTPUT to prevent cache creation for pull requests.
          # Only on pushed changes are build artifacts actually cached, because
          # of github.com/actions/cache's cache isolation logic.
          rm -rf "${KBUILD_OUTPUT}"
      - uses: actions/upload-artifact@v4
        with:
          name: vmlinux-${{ inputs.arch }}-${{ inputs.toolchain_full }}${{ inputs.release && '-release' || '' }}
          if-no-files-found: error
          path: ${{ env.ARTIFACTS_ARCHIVE }}
